import React, { useState } from 'react'
import surveyUtils from '../utils/survey.utils'

interface UserTypeSelectionProps {
  onUserTypeSelected: (userType: 'student' | 'teacher' | 'parent') => void
  questionnaireId: string
  questionnaireName: string
}

export default function UserTypeSelection({
  onUserTypeSelected,
  questionnaireId,
  questionnaireName
}: UserTypeSelectionProps) {
  const [selectedType, setSelectedType] = useState<'student' | 'teacher' | 'parent' | null>(null)
  const [additionalInfo, setAdditionalInfo] = useState({
    age: '',
    grade: '',
    schoolName: ''
  })
  const handleProceed = () => {
    if (!selectedType) return

    console.log('üöÄ UserTypeSelection: Starting user type selection process')
    console.log('üìù Selected user type:', selectedType)
    console.log('üìã Additional info:', additionalInfo)
    console.log('üéØ Questionnaire ID:', questionnaireId)
    console.log('üìÑ Questionnaire name:', questionnaireName)

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const metadata = {
      userType: selectedType,
      userAge: additionalInfo.age ? parseInt(additionalInfo.age) : undefined,
      userGrade: additionalInfo.grade || undefined,
      schoolName: additionalInfo.schoolName || undefined,
      additionalData: {
        selectionTimestamp: new Date().toISOString(),
        questionnaireId,
        questionnaireName
      }
    }
    
    console.log('üíæ Saving user metadata:', metadata)
    surveyUtils.saveUserMetadata(metadata)

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∞—Å—É
    console.log('‚è∞ Starting survey timer for:', questionnaireId)
    surveyUtils.startSurvey(questionnaireId)

    console.log('‚úÖ UserTypeSelection: Process completed, calling onUserTypeSelected')
    onUserTypeSelected(selectedType)
  }

  const userTypes = [
    {
      type: 'student' as const,
      title: '–£—á–µ–Ω—å/–°—Ç—É–¥–µ–Ω—Ç',
      description: '–Ø —Ö–æ—á—É –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –º–∞–π–±—É—Ç–Ω—ñ –ø—Ä–æ—Ñ–µ—Å—ñ—ó',
      icon: 'üéì',
      color: 'bg-blue-500 hover:bg-blue-600'
    },
    {
      type: 'teacher' as const,
      title: '–í—á–∏—Ç–µ–ª—å/–í–∏–∫–ª–∞–¥–∞—á',
      description: '–Ø –¥–æ–ø–æ–º–∞–≥–∞—é —É—á–Ω—è–º –æ–±–∏—Ä–∞—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—ó',
      icon: 'üë®‚Äçüè´',
      color: 'bg-green-500 hover:bg-green-600'
    },
    {
      type: 'parent' as const,
      title: '–ë–∞—Ç—å–∫–æ/–ú–∞—Ç–∏',
      description: '–Ø —Ö–æ—á—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Å–≤–æ—ó–π –¥–∏—Ç–∏–Ω—ñ',
      icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
      color: 'bg-purple-500 hover:bg-purple-600'
    }
  ]

  return (
    <div className="max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-lg">
      <h2 className="text-3xl font-bold text-gray-800 mb-2 text-center">
        –•—Ç–æ –≤–∏?
      </h2>
      <p className="text-gray-600 mb-8 text-center">
        –û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —Ä–æ–ª—å, —â–æ–± –º–∏ –º–æ–≥–ª–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç –ø—ñ–¥ –≤–∞—Å
      </p>

      <div className="grid gap-4 mb-6">
        {userTypes.map((type) => (
          <button
            key={type.type}
            onClick={() => setSelectedType(type.type)}
            className={`p-6 rounded-lg border-2 transition-all duration-200 text-left ${
              selectedType === type.type
                ? 'border-blue-500 bg-blue-50 ring-2 ring-blue-200'
                : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
            }`}
          >
            <div className="flex items-center space-x-4">
              <span className="text-4xl">{type.icon}</span>
              <div className="flex-1">
                <h3 className="text-xl font-semibold text-gray-800 mb-1">
                  {type.title}
                </h3>
                <p className="text-gray-600">{type.description}</p>
              </div>
              <div className={`w-6 h-6 rounded-full border-2 ${
                selectedType === type.type
                  ? 'bg-blue-500 border-blue-500'
                  : 'border-gray-300'
              }`}>
                {selectedType === type.type && (
                  <div className="w-full h-full flex items-center justify-center">
                    <span className="text-white text-sm">‚úì</span>
                  </div>
                )}
              </div>
            </div>
          </button>
        ))}
      </div>

      {selectedType && (
        <div className="space-y-4 mb-6 p-4 bg-gray-50 rounded-lg">
          <h4 className="font-semibold text-gray-800">
            –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (–Ω–µ–æ–±–æ–≤&apos;—è–∑–∫–æ–≤–æ)
          </h4>
          
          <div className="grid gap-4 md:grid-cols-2">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –í—ñ–∫
              </label>
              <input
                type="number"
                value={additionalInfo.age}
                onChange={(e) => setAdditionalInfo(prev => ({ ...prev, age: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–í–∞—à –≤—ñ–∫"
                min="10"
                max="100"
              />
            </div>

            {selectedType === 'student' && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ö–ª–∞—Å/–ö—É—Ä—Å
                </label>
                <input
                  type="text"
                  value={additionalInfo.grade}
                  onChange={(e) => setAdditionalInfo(prev => ({ ...prev, grade: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 11-–ê, 2 –∫—É—Ä—Å"
                />
              </div>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∑–∞–∫–ª–∞–¥
            </label>
            <input
              type="text"
              value={additionalInfo.schoolName}
              onChange={(e) => setAdditionalInfo(prev => ({ ...prev, schoolName: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="–ù–∞–∑–≤–∞ —à–∫–æ–ª–∏, —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É, –∫–æ–ª–µ–¥–∂—É"
            />
          </div>
        </div>
      )}

      <div className="flex justify-center">
        <button
          onClick={handleProceed}
          disabled={!selectedType}
          className={`px-8 py-3 rounded-lg font-semibold text-white transition-all duration-200 ${
            selectedType
              ? 'bg-blue-600 hover:bg-blue-700 shadow-lg hover:shadow-xl'
              : 'bg-gray-400 cursor-not-allowed'
          }`}
        >
          –†–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç
        </button>
      </div>

      <div className="mt-6 text-xs text-gray-500 text-center">
        <p>–í–∞—à—ñ –¥–∞–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –∞–Ω–æ–Ω—ñ–º–Ω–æ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π</p>
      </div>
    </div>
  )
}
