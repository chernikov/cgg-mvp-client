"use client";

import { useEffect, useState, useCallback } from "react";
import {
  collection,
  getDocs,
  query,
  orderBy,
  limit,
  where,
} from "firebase/firestore";
import { db } from "@/lib/firebase";
import type { AILogEntry } from "@/services/ai-logs.service";

interface AILogEntryWithId extends AILogEntry {
  id: string;
}

export default function AILogsAdmin() {
  const [logs, setLogs] = useState<AILogEntryWithId[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [filter, setFilter] = useState({
    questionnaireId: "",
    dateFrom: "",
    dateTo: "",
    success: "all", // 'all', 'success', 'error'
  });

  const loadLogs = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      let q = query(
        collection(db, "ai_logs"),
        orderBy("timestamps.createdAt", "desc"),
        limit(50)
      );

      // –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ —è–∫—â–æ –≤–æ–Ω–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ
      if (filter.questionnaireId) {
        q = query(
          q,
          where("metadata.questionnaireId", "==", filter.questionnaireId)
        );
      }

      if (filter.success !== "all") {
        q = query(
          q,
          where("output.success", "==", filter.success === "success")
        );
      }

      const snapshot = await getDocs(q);
      const logsData: AILogEntryWithId[] = [];

      snapshot.forEach((doc) => {
        const data = doc.data();

        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ Timestamp –Ω–∞–∑–∞–¥ –≤ Date
        const convertedData = {
          ...data,
          id: doc.id,
          timestamps: {
            requestStarted: data.timestamps.requestStarted.toDate(),
            requestCompleted: data.timestamps.requestCompleted.toDate(),
            createdAt: data.timestamps.createdAt.toDate(),
          },
        } as AILogEntryWithId;

        logsData.push(convertedData);
      });

      setLogs(logsData);
    } catch (err) {
      console.error("Error loading AI logs:", err);
      setError(err instanceof Error ? err.message : "Unknown error");
    } finally {
      setLoading(false);
    }
  }, [filter.questionnaireId, filter.success]);

  useEffect(() => {
    const initialLoad = async () => {
      await loadLogs();
    };
    initialLoad();
  }, [loadLogs]); // –î–æ–¥–∞—î–º–æ loadLogs —è–∫ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å

  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat("uk-UA", {
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
    }).format(date);
  };

  const formatDuration = (ms: number) => {
    if (ms < 1000) return `${ms}ms`;
    const seconds = Math.round(ms / 100) / 10;
    return `${seconds}s`;
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }
  if (error) {
    return (
      <div className="p-4">
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          <strong>–ü–æ–º–∏–ª–∫–∞:</strong> {error}
        </div>
        <button
          onClick={loadLogs}
          className="mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
        </button>
      </div>
    );
  }
  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold mb-6">–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è AI –õ–æ–≥—ñ–≤</h1>
      {/* –§—ñ–ª—å—Ç—Ä–∏ */}
      <div className="mb-6 p-4 bg-gray-100 rounded-lg">
        <h2 className="text-lg font-semibold mb-4">–§—ñ–ª—å—Ç—Ä–∏</h2>
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label className="block text-sm font-medium mb-2">ID –ê–Ω–∫–µ—Ç–∏</label>
            <select
              value={filter.questionnaireId}
              onChange={(e) =>
                setFilter({ ...filter, questionnaireId: e.target.value })
              }
              className="w-full p-2 border rounded"
            >
              <option value="">–í—Å—ñ</option>
              <option value="magical-quest">–ú–∞–≥—ñ—á–Ω–∏–π –ö–≤–µ—Å—Ç</option>
              <option value="magical-quest-try-magic">–°–ø—Ä–æ–±–∞ –ú–∞–≥—ñ—ó</option>
              <option value="student-survey">–ê–Ω–∫–µ—Ç–∞ –°—Ç—É–¥–µ–Ω—Ç–∞</option>
              <option value="student-try-magic">–°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∞ –ú–∞–≥—ñ—è</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">–°—Ç–∞—Ç—É—Å</label>
            <select
              value={filter.success}
              onChange={(e) =>
                setFilter({ ...filter, success: e.target.value })
              }
              className="w-full p-2 border rounded"
            >
              <option value="all">–í—Å—ñ</option>
              <option value="success">–£—Å–ø—ñ—à–Ω—ñ</option>
              <option value="error">–ü–æ–º–∏–ª–∫–∏</option>
            </select>
          </div>{" "}
          <div className="md:col-span-2 flex items-end gap-2">
            <button
              onClick={loadLogs}
              className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
            >
              –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –§—ñ–ª—å—Ç—Ä–∏
            </button>
            <button
              onClick={async () => {
                try {
                  console.log("üß™ Testing AI logging system...");
                  // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–∏–Ω–∞–º—ñ—á–Ω–æ
                  const { testAILogging } = await import(
                    "@/utils/test-ai-logging"
                  );
                  const result = await testAILogging();
                  if (result.success) {
                    alert(
                      "‚úÖ –¢–µ—Å—Ç AI –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Ç–∞ –æ–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É."
                    );
                    setTimeout(() => loadLogs(), 1000);
                  } else {
                    alert("‚ùå –¢–µ—Å—Ç AI –ª–æ–≥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–≤—Å—è: " + result.error);
                  }
                } catch (error) {
                  console.error("Test error:", error);
                  alert(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É: " +
                      (error instanceof Error ? error.message : "Unknown")
                  );
                }
              }}
              className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
            >
              üß™ –¢–µ—Å—Ç
            </button>
            <button
              onClick={async () => {
                try {
                  console.log("üîç Running diagnostics...");
                  const { diagnoseAILogging, checkFirebaseRules } =
                    await import("@/utils/diagnose-ai-logging");
                  const result = await diagnoseAILogging();
                  checkFirebaseRules();

                  const summary = `
üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ AI –õ–æ–≥—É–≤–∞–Ω–Ω—è:
‚Ä¢ Firebase: ${result.firebaseConnection ? "‚úÖ" : "‚ùå"}
‚Ä¢ –ö–æ–ª–µ–∫—Ü—ñ—è: ${result.collectionAccess ? "‚úÖ" : "‚ùå"}  
‚Ä¢ –ß–∏—Ç–∞–Ω–Ω—è: ${result.readPermission ? "‚úÖ" : "‚ùå"}
‚Ä¢ –ó–∞–ø–∏—Å: ${result.writePermission ? "‚úÖ" : "‚ùå"}
${result.errors.length > 0 ? "\n‚ùå –ü–æ–º–∏–ª–∫–∏:\n" + result.errors.join("\n") : ""}

–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.`;

                  alert(summary);
                } catch (error) {
                  console.error("Diagnostics error:", error);
                  alert(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: " +
                      (error instanceof Error ? error.message : "Unknown")
                  );
                }
              }}
              className="bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600"
            >
              üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            </button>
          </div>
        </div>
      </div>
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="mb-6 grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-blue-100 p-4 rounded-lg">
          <h3 className="font-semibold">–í—Å—å–æ–≥–æ –õ–æ–≥—ñ–≤</h3>
          <p className="text-2xl font-bold">{logs.length}</p>
        </div>
        <div className="bg-green-100 p-4 rounded-lg">
          <h3 className="font-semibold">–£—Å–ø—ñ—à–Ω–∏—Ö</h3>
          <p className="text-2xl font-bold text-green-600">
            {logs.filter((log) => log.output.success).length}
          </p>
        </div>
        <div className="bg-red-100 p-4 rounded-lg">
          <h3 className="font-semibold">–ü–æ–º–∏–ª–æ–∫</h3>
          <p className="text-2xl font-bold text-red-600">
            {logs.filter((log) => !log.output.success).length}
          </p>
        </div>
        <div className="bg-yellow-100 p-4 rounded-lg">
          <h3 className="font-semibold">–°–µ—Ä–µ–¥. –ß–∞—Å –í—ñ–¥–ø–æ–≤—ñ–¥—ñ</h3>
          <p className="text-2xl font-bold text-yellow-600">
            {logs.length > 0
              ? formatDuration(
                  logs.reduce(
                    (sum, log) => sum + log.metadata.responseTime,
                    0
                  ) / logs.length
                )
              : "0–º—Å"}
          </p>
        </div>
      </div>{" "}
      {/* –¢–∞–±–ª–∏—Ü—è –ª–æ–≥—ñ–≤ */}
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –ß–∞—Å
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –ê–Ω–∫–µ—Ç–∞
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –°—Ç–∞—Ç—É—Å
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –ß–∞—Å –í—ñ–¥–ø–æ–≤—ñ–¥—ñ
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –¢–æ–∫–µ–Ω–∏
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –î—ñ—ó
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {logs.map((log) => (
                <tr key={log.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {formatDate(log.timestamps.createdAt)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    <span className="px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
                      {log.metadata.questionnaireId}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {log.output.success ? (
                      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                        –£—Å–ø—ñ—à–Ω–æ
                      </span>
                    ) : (
                      <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                        –ü–æ–º–∏–ª–∫–∞
                      </span>
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {formatDuration(log.metadata.responseTime)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {log.metadata.tokensUsed || "–ù/–î"}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button
                      onClick={() => {
                        // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≥–ª—è–¥ –ª–æ–≥—É –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ –∞–±–æ –Ω–∞ –Ω–æ–≤—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
                        console.log("–î–µ—Ç–∞–ª—ñ –ª–æ–≥—É:", log);
                        alert("–î–∏–≤—ñ—Ç—å—Å—è –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ª–æ–≥—É"); // –¢–∏–º—á–∞—Å–æ–≤–æ
                      }}
                      className="text-indigo-600 hover:text-indigo-900"
                    >
                      –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {logs.length === 0 && (
          <div className="text-center py-8 text-gray-500">
            –õ–æ–≥–∏, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –ø–æ—Ç–æ—á–Ω–∏–º —Ñ—ñ–ª—å—Ç—Ä–∞–º, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.
          </div>
        )}
      </div>
    </div>
  );
}
