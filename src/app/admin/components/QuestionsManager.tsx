"use client";

import { useState, useEffect } from "react";
import questionsService, {
  StoredQuestionnaire,
} from "../../../services/questions.service";

export default function QuestionsManager() {
  const [questionnaires, setQuestionnaires] = useState<StoredQuestionnaire[]>(
    []
  );
  const [isLoading, setIsLoading] = useState(false);
  const [migrationStatus, setMigrationStatus] = useState<string>("");
  const [selectedQuestionnaire, setSelectedQuestionnaire] =
    useState<StoredQuestionnaire | null>(null);

  useEffect(() => {
    loadQuestionnaires();
  }, []);

  const loadQuestionnaires = async () => {
    setIsLoading(true);
    try {
      const data = await questionsService.getAllQuestionnaires();
      setQuestionnaires(data);
    } catch (error) {
      console.error("Error loading questionnaires:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleMigration = async () => {
    setMigrationStatus("üîÑ –ó–∞–ø—É—Å–∫–∞—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—é –ø–∏—Ç–∞–Ω—å...");
    try {
      await questionsService.migrateQuestionsFromCode();
      setMigrationStatus("‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!");
      await loadQuestionnaires();
    } catch (error) {
      setMigrationStatus("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –º—ñ–≥—Ä–∞—Ü—ñ—ó");
      console.error("Migration error:", error);
    }
  };

  const toggleQuestionnaireStatus = async (
    id: string,
    currentStatus: boolean
  ) => {
    try {
      await questionsService.updateQuestionnaire(id, {
        isActive: !currentStatus,
      });
      await loadQuestionnaires();
    } catch (error) {
      console.error("Error updating questionnaire status:", error);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6 mb-6">
      <h2 className="text-2xl font-bold mb-4">üìù –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∏—Ç–∞–Ω—å</h2>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è */}
      <div className="flex gap-3 mb-6">
        <button
          onClick={loadQuestionnaires}
          disabled={isLoading}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:bg-gray-400"
        >
          {isLoading ? "üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ..." : "üîÑ –û–Ω–æ–≤–∏—Ç–∏"}
        </button>

        <button
          onClick={handleMigration}
          className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
        >
          üì§ –ú—ñ–≥—Ä—É–≤–∞—Ç–∏ –∑ –∫–æ–¥—É
        </button>
      </div>

      {/* –°—Ç–∞—Ç—É—Å –º—ñ–≥—Ä–∞—Ü—ñ—ó */}
      {migrationStatus && (
        <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded">
          {migrationStatus}
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç */}
      <div className="space-y-4">
        <h3 className="text-lg font-semibold">
          –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–Ω–∫–µ—Ç–∏ ({questionnaires.length})
        </h3>

        {questionnaires.length === 0 ? (
          <div className="text-center py-8">
            <div className="text-gray-500 mb-2">
              –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∞–Ω–∫–µ—Ç
            </div>
            <div className="text-sm text-gray-400">
              –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å &quot;–ú—ñ–≥—Ä—É–≤–∞—Ç–∏ –∑ –∫–æ–¥—É&quot; —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç–∏ –∑
              —ñ—Å–Ω—É—é—á–∏—Ö –ø–∏—Ç–∞–Ω—å
            </div>
          </div>
        ) : (
          <div className="grid gap-4">
            {questionnaires.map((questionnaire) => (
              <div key={questionnaire.id} className="border rounded-lg p-4">
                <div className="flex justify-between items-start mb-2">
                  <div>
                    <h4 className="font-medium text-lg">
                      {questionnaire.name}
                    </h4>
                    <p className="text-sm text-gray-600">
                      {questionnaire.description}
                    </p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span
                      className={`px-2 py-1 rounded text-xs ${
                        questionnaire.isActive
                          ? "bg-green-100 text-green-800"
                          : "bg-gray-100 text-gray-800"
                      }`}
                    >
                      {questionnaire.isActive ? "–ê–∫—Ç–∏–≤–Ω–∞" : "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"}
                    </span>
                    <button
                      onClick={() =>
                        toggleQuestionnaireStatus(
                          questionnaire.id,
                          questionnaire.isActive
                        )
                      }
                      className={`px-3 py-1 rounded text-xs ${
                        questionnaire.isActive
                          ? "bg-red-500 text-white hover:bg-red-600"
                          : "bg-green-500 text-white hover:bg-green-600"
                      }`}
                    >
                      {questionnaire.isActive ? "–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏" : "–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏"}
                    </button>
                  </div>
                </div>

                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm mb-3">
                  <div>
                    <span className="text-gray-600">–ü–∏—Ç–∞–Ω—å:</span>
                    <span className="ml-1 font-medium">
                      {questionnaire.questions.length}
                    </span>
                  </div>
                  <div>
                    <span className="text-gray-600">–í–µ—Ä—Å—ñ—è:</span>
                    <span className="ml-1 font-medium">
                      v{questionnaire.version}
                    </span>
                  </div>
                  <div>
                    <span className="text-gray-600">–°—Ç–≤–æ—Ä–µ–Ω–æ:</span>
                    <span className="ml-1 font-medium">
                      {questionnaire.createdAt?.toDate?.()
                        ? questionnaire.createdAt
                            .toDate()
                            .toLocaleDateString("uk-UA")
                        : "–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞"}
                    </span>
                  </div>
                  <div>
                    <span className="text-gray-600">–û–Ω–æ–≤–ª–µ–Ω–æ:</span>
                    <span className="ml-1 font-medium">
                      {questionnaire.updatedAt?.toDate?.()
                        ? questionnaire.updatedAt
                            .toDate()
                            .toLocaleDateString("uk-UA")
                        : "–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞"}
                    </span>
                  </div>
                </div>

                <div className="flex gap-2">
                  <button
                    onClick={() =>
                      setSelectedQuestionnaire(
                        selectedQuestionnaire?.id === questionnaire.id
                          ? null
                          : questionnaire
                      )
                    }
                    className="bg-gray-500 text-white px-3 py-1 rounded text-sm hover:bg-gray-600"
                  >
                    {selectedQuestionnaire?.id === questionnaire.id
                      ? "üôà –°—Ö–æ–≤–∞—Ç–∏"
                      : "üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏"}
                  </button>
                </div>

                {/* –î–µ—Ç–∞–ª—å–Ω–∏–π –ø–µ—Ä–µ–≥–ª—è–¥ –ø–∏—Ç–∞–Ω—å */}
                {selectedQuestionnaire?.id === questionnaire.id && (
                  <div className="mt-4 p-4 bg-gray-50 rounded">
                    <h5 className="font-medium mb-3">–ü–∏—Ç–∞–Ω–Ω—è:</h5>
                    <div className="space-y-3">
                      {questionnaire.questions.map((question, index) => (
                        <div
                          key={question.id}
                          className="p-3 bg-white rounded border"
                        >
                          <div className="flex justify-between items-start mb-2">
                            <span className="font-medium">
                              #{index + 1} ({question.type})
                            </span>
                            <span className="text-xs text-gray-500">
                              {question.id}
                            </span>
                          </div>
                          <p className="text-sm mb-2">{question.question}</p>

                          {question.placeholder && (
                            <p className="text-xs text-gray-500">
                              Placeholder: {question.placeholder}
                            </p>
                          )}

                          {question.options && (
                            <div className="text-xs text-gray-600 mt-1">
                              <span>–û–ø—Ü—ñ—ó: </span>
                              <span>{question.options.join(", ")}</span>
                            </div>
                          )}

                          {(question.min !== undefined ||
                            question.max !== undefined) && (
                            <div className="text-xs text-gray-600 mt-1">
                              –î—ñ–∞–ø–∞–∑–æ–Ω: {question.min} - {question.max}
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </div>

      {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ —Å–µ–∫—Ü—ñ—è */}
      <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded">
        <h4 className="font-semibold text-yellow-800 mb-2">–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</h4>
        <ul className="text-sm text-yellow-700 space-y-1">
          <li>
            ‚Ä¢ <strong>–ú—ñ–≥—Ä–∞—Ü—ñ—è –∑ –∫–æ–¥—É</strong> - –ø–µ—Ä–µ–Ω–µ—Å–µ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –∑ —Ñ–∞–π–ª—É
            questions.ts —É Firebase
          </li>
          <li>
            ‚Ä¢ <strong>–ê–∫—Ç–∏–≤–Ω—ñ –∞–Ω–∫–µ—Ç–∏</strong> - –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
            –≤ –¥–æ–¥–∞—Ç–∫—É
          </li>
          <li>
            ‚Ä¢ <strong>–í–µ—Ä—Å—ñ—ó</strong> - –¥–æ–∑–≤–æ–ª—è—é—Ç—å –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–∏ –≤ –ø–∏—Ç–∞–Ω–Ω—è—Ö
          </li>
          <li>
            ‚Ä¢ –ü—ñ—Å–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó –ø–∏—Ç–∞–Ω–Ω—è –º–æ–∂–Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ Firebase Console
          </li>
        </ul>
      </div>
    </div>
  );
}
