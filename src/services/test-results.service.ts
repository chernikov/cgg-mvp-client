import { db } from "../config/firebase";
import {
  collection,
  doc,
  getDocs,
  setDoc,
  addDoc,
  query,
  orderBy,
  where,
  Timestamp,
  limit,
} from "firebase/firestore";
import type { SurveyResponse, ProfessionMatch } from "../types/survey";

export interface TestResult {
  id: string;
  userId: string; // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–º–æ–∂–µ –±—É—Ç–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ)
  userType: 'student' | 'teacher' | 'parent'; // –¢–∏–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞  questionnaireId: string; // ID –∞–Ω–∫–µ—Ç–∏/—Ç–µ—Å—Ç—É
  questionnaireName: string; // –ù–∞–∑–≤–∞ –∞–Ω–∫–µ—Ç–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
  responses: SurveyResponse[]; // –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  matches?: ProfessionMatch[]; // –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É (–¥–ª—è magical-quest)
  metadata: {
    userAge?: number;
    userGrade?: string;
    schoolName?: string;
    completionTime?: number; // –ß–∞—Å –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    isComplete?: boolean; // –ß–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Ç–µ—Å—Ç –ø–æ–≤–Ω—ñ—Å—Ç—é
    currentStep?: number; // –ü–æ—Ç–æ—á–Ω–∏–π –∫—Ä–æ–∫ (–¥–ª—è –ø—Ä–æ–º—ñ–∂–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤)
    totalSteps?: number; // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤
    progressPercentage?: number; // –í—ñ–¥—Å–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    lastUpdated?: string; // –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    additionalData?: Record<string, string | number | boolean>; // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç–∞–¥–∞–Ω—ñ
  };
  createdAt: Date;
  completedAt: Date;
}

export interface StoredTestResult extends Omit<TestResult, "createdAt" | "completedAt"> {
  createdAt: Timestamp;
  completedAt: Timestamp;
}

export interface TestResultSummary {
  totalResults: number;
  resultsByType: {
    student: number;
    teacher: number;
    parent: number;
  };
  resultsByQuestionnaire: Record<string, number>;
  averageCompletionTime: number;
  recentResults: StoredTestResult[];
}

class TestResultsService {
  private readonly COLLECTION_NAME = "test_results";
  /**
   * –ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É –≤ Firebase
   */
  async saveTestResult(
    result: Omit<TestResult, "id" | "createdAt" | "completedAt">
  ): Promise<string> {
    console.log('üî• TestResultsService: Starting saveTestResult')
    console.log('üìã Input data:', result)
    
    try {
      const docData = {
        ...result,
        createdAt: new Date(),
        completedAt: new Date(),
      };

      console.log('üìÑ Document data to save:', docData)
      console.log('üéØ Collection name:', this.COLLECTION_NAME)

      const docRef = await addDoc(
        collection(db, this.COLLECTION_NAME),
        docData
      );
      
      console.log("‚úÖ TestResultsService: Test result saved successfully!")
      console.log("üÜî Document ID:", docRef.id);
      console.log("üìä Saved to collection:", this.COLLECTION_NAME);
      
      return docRef.id;
    } catch (error) {
      console.error("‚ùå TestResultsService: Error saving test result");
      console.error("üî• Error details:", error);
      console.error("üìã Collection:", this.COLLECTION_NAME);
      console.error("üíæ Data that failed to save:", result);
      throw error;
    }
  }

  /**
   * –ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É –∑ –∫–∞—Å—Ç–æ–º–Ω–∏–º ID
   */
  async saveTestResultWithId(
    id: string,
    result: Omit<TestResult, "id" | "createdAt" | "completedAt">
  ): Promise<void> {
    try {
      const docData = {
        ...result,
        createdAt: new Date(),
        completedAt: new Date(),
      };

      await setDoc(doc(db, this.COLLECTION_NAME, id), docData);
      console.log("‚úÖ Test result saved with custom ID:", id);
    } catch (error) {
      console.error("‚ùå Error saving test result with ID:", error);
      throw error;
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É –∑–∞ ID
   */
  async getTestResult(id: string): Promise<StoredTestResult | null> {
    try {
      const q = query(
        collection(db, this.COLLECTION_NAME),
        where("__name__", "==", id)
      );
      const docSnap = await getDocs(q);

      if (docSnap.empty) {
        console.log("‚ùå No test result found with ID:", id);
        return null;
      }      const docData = docSnap.docs[0].data();
      return {
        id: docSnap.docs[0].id,
        ...docData,
      } as StoredTestResult;
    } catch (error) {
      console.error("‚ùå Error getting test result:", error);
      throw error;
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async getUserTestResults(userId: string): Promise<StoredTestResult[]> {
    try {
      const q = query(
        collection(db, this.COLLECTION_NAME),
        where("userId", "==", userId),
        orderBy("completedAt", "desc")
      );

      const querySnapshot = await getDocs(q);
      const results: StoredTestResult[] = [];

      querySnapshot.forEach((doc) => {
        results.push({
          id: doc.id,
          ...doc.data(),
        } as StoredTestResult);
      });

      console.log(`üìä Loaded ${results.length} test results for user ${userId}`);
      return results;
    } catch (error) {
      console.error("‚ùå Error loading user test results:", error);
      throw error;
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏
   */
  async getQuestionnaireResults(questionnaireId: string): Promise<StoredTestResult[]> {
    try {
      const q = query(
        collection(db, this.COLLECTION_NAME),
        where("questionnaireId", "==", questionnaireId),
        orderBy("completedAt", "desc")
      );

      const querySnapshot = await getDocs(q);
      const results: StoredTestResult[] = [];

      querySnapshot.forEach((doc) => {
        results.push({
          id: doc.id,
          ...doc.data(),
        } as StoredTestResult);
      });

      console.log(`üìä Loaded ${results.length} results for questionnaire ${questionnaireId}`);
      return results;
    } catch (error) {
      console.error("‚ùå Error loading questionnaire results:", error);
      throw error;
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤ –∑–∞ —Ç–∏–ø–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async getResultsByUserType(userType: 'student' | 'teacher' | 'parent'): Promise<StoredTestResult[]> {
    try {
      const q = query(
        collection(db, this.COLLECTION_NAME),
        where("userType", "==", userType),
        orderBy("completedAt", "desc")
      );

      const querySnapshot = await getDocs(q);
      const results: StoredTestResult[] = [];

      querySnapshot.forEach((doc) => {
        results.push({
          id: doc.id,
          ...doc.data(),
        } as StoredTestResult);
      });

      console.log(`üìä Loaded ${results.length} results for ${userType}s`);
      return results;
    } catch (error) {
      console.error("‚ùå Error loading results by user type:", error);
      throw error;
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
   */
  async getAllTestResults(limitCount: number = 50): Promise<StoredTestResult[]> {
    try {
      const q = query(
        collection(db, this.COLLECTION_NAME),
        orderBy("completedAt", "desc"),
        limit(limitCount)
      );

      const querySnapshot = await getDocs(q);
      const results: StoredTestResult[] = [];

      querySnapshot.forEach((doc) => {
        results.push({
          id: doc.id,
          ...doc.data(),
        } as StoredTestResult);
      });

      console.log(`üìä Loaded ${results.length} test results`);
      return results;
    } catch (error) {
      console.error("‚ùå Error loading all test results:", error);
      throw error;
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—ñ–≤
   */
  async getTestResultsSummary(): Promise<TestResultSummary> {
    try {
      const allResults = await this.getAllTestResults(1000); // –û—Ç—Ä–∏–º—É—î–º–æ –±—ñ–ª—å—à–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

      const summary: TestResultSummary = {
        totalResults: allResults.length,
        resultsByType: {
          student: 0,
          teacher: 0,
          parent: 0,
        },
        resultsByQuestionnaire: {},
        averageCompletionTime: 0,
        recentResults: allResults.slice(0, 10), // –û—Å—Ç–∞–Ω–Ω—ñ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
      };

      let totalCompletionTime = 0;
      let completionTimeCount = 0;

      allResults.forEach((result) => {
        // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞ —Ç–∏–ø–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        summary.resultsByType[result.userType]++;        // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞ –∞–Ω–∫–µ—Ç–∞–º–∏
        if (!summary.resultsByQuestionnaire[result.questionnaireName]) {
          summary.resultsByQuestionnaire[result.questionnaireName] = 0;
        }
        summary.resultsByQuestionnaire[result.questionnaireName]++;

        // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–∞—Å—É –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è
        if (result.metadata.completionTime) {
          totalCompletionTime += result.metadata.completionTime;
          completionTimeCount++;
        }
      });

      if (completionTimeCount > 0) {
        summary.averageCompletionTime = Math.round(totalCompletionTime / completionTimeCount);
      }

      console.log("üìä Generated test results summary:", summary);
      return summary;
    } catch (error) {
      console.error("‚ùå Error generating test results summary:", error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–¥–ª—è –∞–Ω–æ–Ω—ñ–º–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
   */
  generateUserId(): string {
    return `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä—É—î ID —Å–µ—Å—ñ—ó –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
   */
  generateSessionId(): string {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
}

const testResultsService = new TestResultsService();
export default testResultsService;
